generator kysely {
  provider = "prisma-kysely"
  output   = "../src/db"
  fileName = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TxType {
  INCOME
  EXPENSE
}

model User {
  id    String @id @default(uuid()) @db.Uuid
  name  String
  phone String @unique

  transactions      Transaction[]
  fixedTransactions FixedTransaction[]
  months            Month[]
  budgetSetting     BudgetSetting?
  categories        Category[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
}

model Category {
  id     String @id @default(uuid()) @db.Uuid
  userId String @db.Uuid
  name   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  transactions      Transaction[]
  fixedTransactions FixedTransaction[]

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  @@unique([userId, name])
  @@index([userId])
}

model FixedTransaction {
  id          String  @id @default(uuid()) @db.Uuid
  userId      String  @db.Uuid
  categoryId  String  @db.Uuid
  type        TxType
  amount      Int
  description String?

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  @@index([userId])
  @@index([categoryId])
}

model Transaction {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @db.Uuid
  categoryId  String   @db.Uuid
  type        TxType
  amount      Int
  description String?
  occurredAt  DateTime @db.Timestamptz

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  @@index([userId, occurredAt])
  @@index([categoryId])
}

model BudgetSetting {
  id               String @id @default(uuid()) @db.Uuid
  userId           String @unique @db.Uuid
  savingPercentage Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz
}

model Month {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  monthStart   DateTime @db.Timestamptz
  startBalance Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  @@unique([userId, monthStart])
  @@index([userId])
}
